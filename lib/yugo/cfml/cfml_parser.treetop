# CFML grammar

grammar CFML
  rule content
    (tag / comment / char)* <Yugo::CFML::Content>
  end

  rule text
    [^<]+
  end

  rule char
    .
  end

  # Tags
  # ====

  rule tag
    output_tag / set_tag / if_tag / query_tag / script_tag / include_tag / param_tag
  end

  rule attribute
    identifier space? '=' space? expression <Yugo::CFML::Attribute>
  end

  rule attribute_list
    (space? (attribute))*
  end

  # <cfoutput>
  # ----------

  rule output_tag
    open_output_tag space? output_tag_content space? end_output_tag <Yugo::CFML::OutputTag>
  end

  rule open_output_tag
    '<' [cC] [fF] [oO] [uU] [tT] [pP] [uU] [tT] attribute_list space? '>'
  end

  rule end_output_tag
    '</' [cC] [fF] [oO] [uU] [tT] [pP] [uU] [tT] space? '>'
  end

  rule output_tag_content
    (!end_output_tag (quote / comment / char))* <Yugo::CFML::Content>
  end

  # <cfset>
  # -------

  rule set_tag
    '<' [cC] [fF] [sS] [eE] [tT] space statement space? '>' <Yugo::CFML::SetTag>
  end

  # <cfif>
  # ------

  rule if_tag
    open_if_tag if_tag_content? (elseif_tag if_tag_content?)? (else_tag if_tag_content?)? end_if_tag <Yugo::CFML::IfTag>
  end

  rule open_if_tag
    '<' [cC] [fF] [iI] [fF] space expression space? '>'
  end

  rule if_tag_content
    (!end_if_tag !elseif_tag !else_tag (tag / comment / char))* <Yugo::CFML::Content>
  end

  rule elseif_tag
    '<' [cC] [fF] [eE] [lL] [sS] [eE] [iI] [fF] space expression space? '>'
  end

  rule else_tag
    '<' [cC] [fF] [eE] [lL] [sS] [eE] '>'
  end

  rule end_if_tag
    '</' [cC] [fF] [iI] [fF] '>'
  end

  # <cfscript>
  # ----------

  rule script_tag
    open_script_tag space? script_tag_content space? end_script_tag <Yugo::CFML::ScriptTag>
  end

  rule script_tag_content
    (!end_script_tag statement)* <Yugo::CFML::Content>
  end

  rule open_script_tag
    '<' [cC] [fF] [sS] [cC] [rR] [iI] [pP] [tT] space? '>'
  end

  rule end_script_tag
    '</' [cC] [fF] [sS] [cC] [rR] [iI] [pP] [tT] space? '>'
  end

  # <cfquery>
  # ---------

  rule query_tag
    open_query_tag space? query_tag_content space? end_query_tag
  end

  rule query_tag_content
    (!end_query_tag (quote / char))* <Yugo::CFML::Content>
  end

  rule open_query_tag
    '<' [cC] [fF] [qQ] [uU] [eE] [rR] [yY] attribute_list space? '>'
  end

  rule end_query_tag
    '</' [cC] [fF] [qQ] [uU] [eE] [rR] [yY] '>'
  end

  # <cfinclude>
  # -----------

  rule include_tag
    '<' [cC] [fF] [iI] [nN] [cC] [lL] [uU] [dD] [eE] attribute_list space? '>' <Yugo::CFML::IncludeTag>
  end

  # <cfparam>
  # -----------

  rule param_tag
    '<' [cC] [fF] [pP] [aA] [rR] [aA] [mM] attribute_list space? '>' <Yugo::CFML::ParamTag>
  end

  rule quote
    '#' expression '#' <Yugo::CFML::Quote>
  end

  rule tag_text
    [^<]+
  end

  rule open_tag
    open_attribute_tag / open_statement_tag
  end

  rule open_attribute_tag
    '<' identifier attribute_list space? '>'
  end

  rule open_statement_tag
    '<' identifier space statement space? '>'
  end

  rule end_tag
    '</' identifier space? '>'
  end

  rule comment
    start_comment comment_content* end_comment <Yugo::CFML::Comment>
  end

  rule comment_content
    !start_comment !end_comment .
  end

  rule start_comment
    '<!--'
  end

  rule end_comment
    '-->'
  end

  # Statements

  rule statement
    assignment / expression
  end

  rule assignment
    (assignment_scope space)? assignee space? '=' space? expression <Yugo::CFML::Assignment>
  end

  rule assignee
    identifier
  end

  rule assignment_scope
    'var'
  end

  # Expressions

  rule expression
    space? (member_expression / comparative_operation / additive_operation) <Yugo::CFML::Expression>
  end

  rule array_literal
    '[' space? ']' /  '[' expression ']' / '[' expression (',' expression)+ ']'
  end

  rule function_application
    identifier function_arguments <Yugo::CFML::FunctionApplication>
  end

  rule function_arguments
    argument_list:(
      '(' space? ')'
      /
      '(' space? expression space? ')'
      /
      '(' space? expression space? (',' expression)+ ')'
    )
    /
    '(' attribute_list ')'
  end

  rule comparative_operation
    additive_operation space? comparative_op space? comparative_operation <Yugo::CFML::BinaryOperation>
    /
    additive_operation
  end

  rule additive_operation
    multiplicative_operation space? additive_op space? additive_operation <Yugo::CFML::BinaryOperation>
    /
    multiplicative_operation
  end

  rule multiplicative_operation
    prefix_operation space? multiplicative_op space? multiplicative_operation <Yugo::CFML::BinaryOperation>
    /
    prefix_operation
  end

  rule prefix_operation
    prefix_unary_op space? prefix_operation <Yugo::CFML::PrefixOperation>
    /
    primary
  end

  # TODO: need to evalute at into a Ruby AST
  rule member_expression
    head:primary
    tail:(
      space? '.' space? (property:function_application / property:identifier)
      /
      space? '[' property:expression ']'
    )*
    <Yugo::CFML::PropertyAccess>
  end

  rule primary
    function_application
    /
    literal
    /
    this / super_keyword
    /
    identifier
    /
    array_literal
    /
    '(' space? expression space? ')'
    {
      def ruby_ast(scope)
        expression.ruby_ast(scope)   
      end
    }
  end

  rule additive_op
    add_op / sub_op / and_op / xor_op / or_op / imp_op
  end

  # TODO: Exponentiation should have higer precendence?
  rule multiplicative_op
    mult_op / div_op / mod_op / exp_op / percent_mod_op
  end

  rule comparative_op
    concat_op / contains_op / doesnotcontain_op / greaterthanorequalto_op / gte_op / lessthanorequalto_op
    / lte_op / gt_op / greaterthan_op / lt_op / lessthan_op / eqv_op / isnot_op / is_op / equal_op
    / equals_op / eq_op / notequal_op / neq_op
  end

  rule prefix_unary_op
    not_op / bang_not_op / add_op / sub_op
  end

  # Operators

  rule not_op
    [nN] [oO] [tT] space <Yugo::CFML::NotOperator>
  end

  rule bang_not_op
    '!' <Yugo::CFML::NotOperator>
  end

  rule add_op
    '+' <Yugo::CFML::AdditionOperator>
  end

  rule sub_op
    '-' <Yugo::CFML::SubtractionOperator>
  end

  rule mult_op
    '*' <Yugo::CFML::MultiplicationOperator>
  end

  rule div_op
    '/' <Yugo::CFML::DivisionOperator>
  end

  rule exp_op
    '^' <Yugo::CFML::ExponentOperator>
  end

  rule concat_op
    '&' <Yugo::CFML::ConcatenationOperator>
  end

  rule mod_op
    [mM] [oO] [dD] <Yugo::CFML::ModulusOperator>
  end

  rule percent_mod_op
    '%' <Yugo::CFML::ModulusOperator>
  end

  rule is_op
    [iI] [sS] <Yugo::CFML::EqualOperator>
  end

  rule equal_op
    [eE] [qQ] [uU] [aA] [lL] <Yugo::CFML::EqualOperator>
  end

  rule equals_op
    [eE] [qQ] [uU] [aA] [lL] [sS] <Yugo::CFML::EqualOperator>
  end

  rule eq_op
    [eE] [qQ] <Yugo::CFML::EqualOperator>
  end

  rule isnot_op
    [iI] [sS] [\s] [nN] [oO] [tT] <Yugo::CFML::NotEqualOperator>
  end

  rule notequal_op
    [nN] [oO] [tT] [\s] [eE] [qQ] [uU] [aA] [lL] <Yugo::CFML::NotEqualOperator>
  end

  rule neq_op
    [nN] [eE] [qQ] <Yugo::CFML::NotEqualOperator>
  end

  rule contains_op
    [cC] [oO] [nN] [tT] [aA] [iI] [nN] [sS] <Yugo::CFML::ContainsOperator>
  end

  rule doesnotcontain_op
    [dD] [oO] [eE] [sS] [\s] [nN] [oO] [tT] [\s] [cC] [oO] [nN] [tT] [aA] [iI] [nN] <Yugo::CFML::DoesNotContainOperator>
  end

  rule greaterthan_op
    [gG] [rR] [eE] [aA] [tT] [eE] [rR] [\s] [tT] [hH] [aA] [nN] <Yugo::CFML::GreaterThanOperator>
  end

  rule gt_op
    [gG] [tT] <Yugo::CFML::GreaterThanOperator>
  end

  rule or_equal_to
    [\s] [oO] [rR] [\s] [eE] [qQ] [uU] [aA] [lL] [\s] [tT] [oO]
  end

  rule greaterthanorequalto_op
    greaterthan_op or_equal_to <Yugo::CFML::GreaterThanOrEqualToOperator>
  end

  rule gte_op
    [gG] [tT] [eE] <Yugo::CFML::GreaterThanOrEqualToOperator>
  end

  rule lessthan_op
    [lL] [eE] [sS] [sS] [\s] [tT] [hH] [aA] [nN] <Yugo::CFML::LessThanOperator>
  end

  rule lt_op
    [lL] [tT] <Yugo::CFML::LessThanOperator>
  end

  rule lessthanorequalto_op
    lessthan_op or_equal_to <Yugo::CFML::LessThanOrEqualToOperator>
  end

  rule lte_op
    [lL] [tT] [eE] <Yugo::CFML::LessThanOrEqualToOperator>
  end

  rule and_op
    [aA] [nN] [dD] <Yugo::CFML::AndOperator>
  end

  rule or_op
    [oO] [rR] <Yugo::CFML::OrOperator>
  end

  rule xor_op
    [xX] [oO] [rR] <Yugo::CFML::XorOperator>
  end

  rule eqv_op
    [eE] [qQ] [vV] <Yugo::CFML::EqvOperator>
  end

  rule imp_op
    [iI] [mM] [pP] <Yugo::CFML::ImpOperator>
  end

  # Literals

  rule literal
    integer / float / string / boolean / null
  end

  rule integer
    ('+' / '-')? [0-9]+ <Yugo::CFML::Integer>
  end

  rule float
    ('+' / '-')? [0-9]+ (('.' [0-9]+) / ('e' [0-9]+)) <Yugo::CFML::Float>
  end

  rule string
    double_quote_string / single_quote_string
  end

  rule quote
    '#' expression '#' <Yugo::CFML::Quote>
  end

  rule double_quote_string
    '"' ('""' / '##' / quote / [^"])* '"' <Yugo::CFML::String>
  end
  
  rule single_quote_string
    "'" ("''" / '##' / quote / [^'])* "'" <Yugo::CFML::String>
  end

  rule identifier
    [a-zA-Z_] [a-zA-Z0-9_]* <Yugo::CFML::Identifier>
  end

  rule boolean
    true / false
  end

  rule true
    [tT] [rR] [uU] [eE] <Yugo::CFML::Boolean>
  end

  rule false
    [fF] [aA] [lL] [sS] [eE] <Yugo::CFML::Boolean>
  end

  rule null
    [nN] [uU] [lL] [lL] <Yugo::CFML::Null>
  end
  
  rule this
    [tT] [hH] [iI] [sS] <Yugo::CFML::This>
  end

  rule super_keyword
    [sS] [uU] [pP] [eE] [rR] <Yugo::CFML::Super>
  end

  # Whitespace

  rule space
    [\s]+
  end

  # End of File

  rule end_of_file
    !.
  end
end
